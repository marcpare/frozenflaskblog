<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        small red tile rss
    </title>
    
    <link href="" rel="self" />
    

    
    <link href="http://www.smallredtile.com"/>
    

    
    

    <updated></updated>

    
        <entry>
            <title type="html">A Most Massively Useful Towel for Javascript (Soaking Errors in Javascript Object Traversal)</title>
            <author><name></name></author>
            <link href="/posts/20140514-safe/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20140514-safe/</id>
            
            <content type="html">
              <p>Perhaps you've also run into TypeErrors when accessing deeply nested properties in Javascript objects?</p>
<p>If not, consider a nested object like,</p>
<pre class="prettyprint">
obj = {
  event: {
    location: {
      place: {
        name: 'Friday Harbor'
      }
    }
  }
}
</pre>

<p>Access the nested <code>name</code> in the naive way looks like this:</p>
<pre class="prettyprint">
obj.event.location.place.name
</pre>

<p>Unfortunately, we get a TypeError if any of the fields are <code>null</code> or <code>undefined</code>.</p>
<p>There are two basic techniques for dealing with this:</p>
<ol>
<li>Check for existence at each level of property access</li>
<li>Wrap property access in a <code>try/catch</code> block</li>
</ol>
<p>Neither technique results in particularly nice code. You don't want to be wrapping every object access in a <code>try/catch</code> block, nor do you want to be writing pyramids of <code>if</code> statements.</p>
<p>There's another little bit to consider: what do you do if your lookup fails? I usually want to just return some default value. </p>
<p>After a bit of searching, I found a few main approaches to do object traversal nicely. I found each lacking.</p>
<p>(1) "Path" lookups</p>
<p>A path lookup looks like some variation of the following,</p>
<pre class="prettyprint">
obj.path('event.location.place.name');
// returns undefined if fails
</pre>

<p>This works ok unless you have a property with a <code>.</code> in it. One implementation (<a href="https://github.com/jclem/steeltoe">SteelToe</a>) could handle this:</p>
<pre class="prettyprint">
SteelToe(obj)('event')('location')('place')('name')
</pre>

<p>But the bigger issue is that it forces us to use a new API for object traversal. Introducing new APIs for fundamental operations has to be done carefully, and I think this path lookups don't quite strike the balance.</p>
<p>(2) <a href="http://blog.osteele.com/posts/2007/12/cheap-monads">cheap monads</a></p>
<p>A sort of variation on existence checking.</p>
<pre class="prettyprint">
var name = 
  ((((obj||{}).event||{}).location||{}).place||{}).name;
</pre>

<p>Lots of syntactic noise. Requires funky paren balancing. A good technique if you want to impress someone reading your code but not the clearest.</p>
<p>(3) <a href="https://github.com/chrislewis/monad.js">Monad.js</a></p>
<p>An interesting attempt to create an <code>either</code> construct that we can use to wrap the unsafe traversal operation. Unfortunately, getting our value out of the monad isn't so pretty.</p>
<pre class="prettyprint">
var unsafe_name = function () { 
  return obj.event.location.place.name; 
}
var safe_name = monad.eitherEx(unsafe_name);

var name = safe_name.fold(
  function (error) {
    return 'some default value';
  },
  function (name) {
    return name;
  }
);
</pre>

<p>While option (3), Monad.js, looks like the worst of the three, it got me thinking along an interesting line. The heart of the pattern is wrapping an unsafe operation in a function. Let's try a variation on this idea.</p>
<h2>The Towel</h2>
<p>Let's say that I just want to soak up the error after a failed function call and return some default value. Well, that isn't too hard to do:</p>
<pre class="prettyprint">
// a towel soaks errors
function towel = function (f, default) {
  try {
    return f();
  } catch (e) {
    return default;
  }
}
</pre>

<p>If <code>f()</code> produces an error, the function returns the provided default value. Otherwise, it just returns <code>f()</code>.</p>
<p>We can make it a bit more capable by optionally calling <code>default</code> if it happens to be a function:</p>
<pre class="prettyprint">  
function towel = function (f, default) {
  try {
    return f();
  } catch (e) {
    return _.result(default);
  }
}
</pre>

<p>(<a href="http://underscorejs.org/#result"><code>_.result</code></a>)</p>
<p>Now safely traversing an object is easy. We just wrap our dangerous traversal in a function and soak up any error it might produce:</p>
<pre class="prettyprint"> 
var getName = function () { 
  return obj.event.location.place.name; 
}
var name = towel(getName, 'not found');
</pre>

<p>We use the familiar old object dot notation to access our property. We don't introduce any obscure syntax, relying instead on tried and true Javascript functions. This has a nice bonus because as Javascript evolves, the little bit of syntactic noise we incur will disappear. Here's an implementation using the ES6 "fat arrow" syntax:</p>
<pre class="prettyprint"> 
var name = 
  towel(() => obj.event.location.place.name, 'not found');
</pre>

<p>Sources:</p>
<ul>
<li>One discussion on SO: <a href="http://stackoverflow.com/questions/10918488/testing-nested-objects-as-undefined-in-javascript](http://stackoverflow.com/questions/10918488/testing-nested-objects-as-undefined-in-javascript">http://stackoverflow.com/questions/10918488/testing-nested-objects-as-undefined-in-javascript](http://stackoverflow.com/questions/10918488/testing-nested-objects-as-undefined-in-javascript</a></li>
<li>Another: <a href="http://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key">http://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key</a></li>
<li>_.deep.js: <a href="https://gist.github.com/furf/3208381">https://gist.github.com/furf/3208381</a></li>
<li>SteelToe: <a href="https://github.com/jclem/steeltoe">https://github.com/jclem/steeltoe</a></li>
<li>chaijs pathval: <a href="https://github.com/chaijs/pathval">https://github.com/chaijs/pathval</a></li>
<li>cheap monads (a nifty line of thought) <a href="http://blog.osteele.com/posts/2007/12/cheap-monads">http://blog.osteele.com/posts/2007/12/cheap-monads</a></li>
<li>monad.js <a href="https://github.com/chrislewis/monad.js">https://github.com/chrislewis/monad.js</a></li>
</ul>
            </content>
        </entry>
    
        <entry>
            <title type="html">Verbs Instead of Nouns</title>
            <author><name></name></author>
            <link href="/posts/20140408-functional/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20140408-functional/</id>
            
            <content type="html">
              <p>Jorge Luis Borges introduces us to a strange world in <em>Tlön, Uqbar, Oris Tertius</em>:</p>
<blockquote>
<p>"For them, the world is not a concurrence of objects in space, but a heterogeneous series of independent acts. It is serial and temporal, but not spatial. There are no nouns in the hypothetical <em>Ursprache</em> of Tlön...For example, there is no word corresponding to the noun <em>moon</em>, but there is a verb <em>to moon</em> or <em>to moondle</em>. <em>The moon rose over the sea</em> would be written..."<em>upward beyond the constant flow there was moondling</em>" (23)</p>
</blockquote>
<p>See if you can catch the parallels this software engineer's description of a bit of Javascript: </p>
<blockquote>
<p>If the functions defined by mixins are intended solely for the use of other object why bother creating mixins as regular objects at all? Put another way, a mixin should be a process not an object. The logical conclusion is to make our mixins into functions into which consumer objects inject themselves by delegation, thus cutting out the middle guy (the extend function) entirely.</p>
<p>...</p>
<p>This approach feels right. Mixins as verbs instead of nouns; lightweight one stop function shops -- <a href="http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/">Angus Croll</a></p>
</blockquote>
<p>Uncanny, right? The idea of modeling as "verbs instead of nouns" comes up again and again. There's an interesting connection to the idea of Duck Typing, <a href="http://en.wikipedia.org/wiki/Duck_typing">from Wikipedia</a>:</p>
<blockquote>
<p>The name of the concept refers to the duck test, attributed to James Whitcomb Riley (see history below), which may be phrased as follows:</p>
<p>When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.[1]</p>
<p>In duck typing, a programmer is only concerned with ensuring that objects <em>behave as demanded</em> of them in a given context, rather than ensuring that they are of a specific type.</p>
</blockquote>
<p>Here, we define something as a "duck" if it happens to <em>do</em> the things that a duck does. It doesn't matter what the thing really <em>is</em>. This just happens to be found in American Pragmatism, as well:</p>
<blockquote>
<p>Pragmatists...do not believe that there is a way things really are. So they want to replace the appearance/reality distinction by [the distinction] between descriptions of the world and of ourselves, which are less useful, and those, which are more useful. –Rorty</p>
</blockquote>
<p>All of this is sort of a dreamy, emphasizing the movement of things rather than their (seemingly) solid existence. I think this thought was at the root of my fascination with the idea of <a href="http://smallredtile.com/posts/20131029-bird/">pigment vs. structural colors</a> because it revealed that color isn't necessarily a static thing; rather, it's the result of the movement of photons, scattered in a particular way, which constantly bombard my eyeballs. In other words, color is not necessarily a specific thing, but, instead, a movement through time, an action over time.</p>
<p>The other side to note as a computer programmer is the practical side. You are almost never concerned with what something actually <em>is</em>, just with imitating or modeling it well enough. A computer simulation of a wind turbine is not actually a wind turbine. That's ok, the computer program is interesting because it happens to describe the behavior of a wind turbine well enough for the design engineers. </p>
            </content>
        </entry>
    
        <entry>
            <title type="html">grep awesome</title>
            <author><name></name></author>
            <link href="/posts/20140407-grepawesome/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20140407-grepawesome/</id>
            
            <content type="html">
              <p>I happened to search my entire javascript codebase for the word "awesome" last week. I stumbled into this little gem in the jQuery source:</p>
<pre class="prettyprint">
// A tribute to the "awesome hack by Dean Edwards"
// Chrome < 17 and Safari 5.0 uses "computed value" 
// instead of "used value" for margin-right
// Safari 5.1.7 (at least) returns percentage for a 
// arger set of values, but width seems to be reliably 
// pixels this is against the CSSOM draft spec: 
// http://dev.w3.org/csswg/cssom/#resolved-values
if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

    // Remember the original values
    width = style.width;
    minWidth = style.minWidth;
    maxWidth = style.maxWidth;

    // Put in the new values to get a computed value out
    style.minWidth = style.maxWidth = style.width = ret;
    ret = computed.width;

    // Revert the changed values
    style.width = width;
    style.minWidth = minWidth;
    style.maxWidth = maxWidth;
}
</pre>

<p>What a gnarly little piece of code. The best explanation I found about this is at <a href="http://heygrady.com/blog/2011/12/21/length-and-angle-unit-conversion-in-javascript/">heygrady</a>. Shows how the effort required to provide compatibility across browser versions grows exponentially rather than linearly – getting those last little things right takes hacks, workaround, and black magic.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Flowers and Recursion</title>
            <author><name></name></author>
            <link href="/posts/20140104-flower/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20140104-flower/</id>
            
            <content type="html">
              <p>Worms, trees, branches, roots, seeds, genetic algorithms, viruses. Why do we borrow so many metaphors in computing from nature?</p>
<p>These interesting white clusters grow around our place on Vashon Island. They’re called Queen Anne's Lace. They range in size from 1 cm across to about 10 cm. The smaller ones have just a half dozen little buds of flowers. The largest ones are a dense disk of flowers within flowers. I was trying to sort out the pattern of the petals while waiting for the bus one afternoon.</p>
<p>If you look closely, you see that the whole thing is made up of really tiny flowers. These tiny flowers form clumps, which are arranged in growing rings from the center of flower. I tried to count how many flowers were in each clump, but it wasn't all that easy to tell.</p>
<p>Eventually, I decided there were five clumps in each ring. But there were actually two rings at each level, so it's more like there are ten clumps in each ring. I decided that each clump follows the same rules as the overall pattern. Each time a ring emanates one step further from the center of the flower, each clump grows another ring. I used this algorithm to generate a picture of the flower.</p>
<p><img alt="The pattern" src="/static/images/20140104-flowerfractal1.png" />
<img alt="The result" src="/static/images/20140104-flowerfractal2.png" /></p>
<p>It's a recursive algorithm: the pattern of each small cluster of flowers is the same pattern as the arrangement of all the clusters. There's all sorts of clever patterns in the plants, animals, and weather around which keep things from falling apart in the face of astonishing complexity. An intuition about these sorts of patterns will help you write better software since writing software is essentially the act of managing complexity. </p>
<p>So, looking at nature might be good for your programming practice. But this exercise was interesting in sort of the other direction as well: analyzing the algorithm for generating the flower taught me something about nature. It’s satisfying to see that there is some pattern to how the flower is organized. It’s more fun later when you look at another flower and realize a subtle difference in the pattern. This process transforms nature from “that green stuff all around” into an unending collection of delightful things: a specific herb that you can crush up and use to stop bleeding, a marker of the health of the air and soil, a little toy you can show off to your younger brother.</p>
<p>Richard Feynman explains it in his usual captivating way–</p>
<blockquote>
<p>“I have a friend who's an artist … He'll hold up a flower and say "look how beautiful it is," and I'll agree. Then he says "I as an artist can see how beautiful this is but you as a scientist take this all apart and it becomes a dull thing," and I think that he's kind of nutty. First of all, the beauty that he sees is available to other people and to me too, I believe. Although I may not be quite as refined aesthetically as he is ... I can appreciate the beauty of a flower. At the same time, I see much more about the flower than he sees. I could imagine the cells in there, the complicated actions inside, which also have a beauty. I mean it's not just beauty at this dimension, at one centimeter; there's also beauty at smaller dimensions, the inner structure, also the processes. The fact that the colors in the flower evolved in order to attract insects to pollinate it is interesting; it means that insects can see the color. It adds a question: does this aesthetic sense also exist in the lower forms? Why is it aesthetic? All kinds of interesting questions which the science knowledge only adds to the excitement, the mystery and the awe of a flower. It only adds. I don't understand how it subtracts.”</p>
</blockquote>
<p>The study of algorithms and the study of nature have things in common because they both connect with some underlying traits of the universe (order, chaos, structure, and creation). The algorithmist can dive a few layers deeper into the structure of the universe, never reaching a limit of fascinating nuance. While we borrow a lot from nature in writing software, the relationship works the other way around, as well.</p>
<p>The recursion of the flower reveals that coding is a rite; it summons the ineffable properties of the universe.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Implementing Interactive Engineering Calculations with Backbone Javascript</title>
            <author><name></name></author>
            <link href="/posts/20131120-wbtbuddytechnical/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131120-wbtbuddytechnical/</id>
            
            <content type="html">
              <p>I wrote lots of engineering reports as an undergrad in Mechanical Engineering, and I've always dreamed there was something more we could do more to present calculations to be understand, learned, and shared. Here is the result of a recent experiment to simplify a nasty Excel spreadsheet into an interactive calculation.</p>
<p>The <a href="http://smallredtile.com/stove/wbt-buddy/">WBT Buddy</a> is a single-page app that performs an energy efficiency calculation with the steps explicitly laid out. It also visualizes your result against some baseline quantities. </p>
<p>Everything happens in the browser. While the capability to do so has been around for a decade, it's never been easier to develop this sort of functionality thanks to a constellation of front-end tools: Backbone Javascript, CSS3, and Bootstrap.</p>
<p>The integration of these tools is quite painless. I built a sort of framework on top of them for the notion of a "user interface for engineering calculations". This is a big area, and this effort is certainly not the final say in how this should be done. Each problem will have its own contours, and you should choose your abstractions to fit into them.</p>
<p>With that in mind, here are some of the tools I chose and how they were deployed:</p>
<h2>Binding to Bootstrap events</h2>
<p>The fuel type selection box is a Bootstrap <code>.nav-pills</code> list. Each link item is given <code>data-toggle="pill"</code>. When the link is clicked a <code>shown.bs.tab</code> event is triggered. You can bind that event with one line of Backbone code:</p>
<p><img alt="navpills" src="/static/images/20131120navpills.png" /></p>
<pre class="prettyprint">
events: {
  'shown.bs.tab .fuel-type-choice' : 'updateOnClick'
}
</pre>

<h2>CSS bar-graph</h2>
<p>While I love the d3 visualization library, I was not looking forward to laying out an entire visualization for a single bar graph. Fortunately, I managed to pull this off with just CSS.</p>
<p>To render the bar corresponding to 15% here:</p>
<p><img alt="bargraph" src="/static/images/20131120-bar.png" /></p>
<p>This is all that's required:</p>
<pre class="prettyprint">
&lt;li class="yours"&gt;
  15%
  &lt;span class="bar" style="width:12%"&gt;&lt;/span&gt;
&lt;/li&gt;
</pre>

<p>Back when I was introduced to web programming as an intern in college, I spent an entire summer rendering bar graphs in Javascript. Now, it takes just a few minutes of choosing the right CSS property.</p>
<h2>numeral.js for formatting</h2>
<p>Formatting numbers isn't built-in to Javascript. I grabbed the numeral.js library to make this easy.</p>
<p>If I wanted to turn "26312.35266" into "26,312.35", I did this:</p>
<pre class="prettyprint">
return numeral(number).format("0,00.00");
</pre>

<h2>Domain Specific Language for updatable equations</h2>
<p>This feature will get its own blog post as it takes some explaining. Here is a short preview.</p>
<p>I implemented a tiny language for building templates for "steps of an equation". Here's what one of the equation steps looks like, with its two states shown:</p>
<p><img alt="equation1" src="/static/images/20131120-eq1.png" /></p>
<p><img alt="equation2" src="/static/images/20131120-eq2.png" /></p>
<p>The code that creates this equation step look like this:</p>
<pre class="prettyprint">
return model.equationTemplate(
  "E_H2O = ([m_H2O]) * [c_pH2O] * ([T_B] - [T_A])"
);
</pre>

<p>You can also do things like convert the variables to different units or format the output number. The following template converts the <code>E_H2O</code> quantity to kiloJoules and formats it with one digit after the decimal point.</p>
<pre class="prettyprint">
return model.equationTemplate(
  "OTE = [E_H2O kJ -f 0.0] / [E_fuel kJ -f 0.0]"
);
</pre>

<p>I originally fiddled with using a parser generator (PEG.js) for this feature. However, I found it was more straightforward to build on top of the underscore.js templating code (which in turn is built on top of John Resig's micro-templating example)</p>
<h2>Conclusions</h2>
<p>Backbone.JS the implementation of the WBT Buddy quite enjoyable. Binding events between the inputs, equation model, and calculation outputs was logical. The abstractions in Backbone.JS are flexible. I never found myself fighting against the framework to get something done. I would reach for these tools again in future projects.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Dali&#39;s take on Dante&#39;s Divine Comedy</title>
            <author><name></name></author>
            <link href="/posts/20131105-dante/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131105-dante/</id>
            
            <content type="html">
              <p>Dali did a series of watercolors from Dante's Divine Comedy years after <a href="posts/20131022-dore">Gustave Doré's</a> famous illustrations.</p>
<p>Dali was a surrealist painter, so it's interesting to see how the very literal interpretations of Doré transform under Dali's influence.</p>
<p>History Lesson from Cacciaguida  </p>
<p><img alt="Cacciaguida" src="/static/images/20131105-cacciaguida.jpg" />
<img alt="Cacciaguida" src="/static/images/20131105-cacciaguida2.jpg" /></p>
<p>Cerberus</p>
<p><img alt="Cerberus" src="/static/images/20131105-cerberus.jpg" />
<img alt="Cerberus" src="/static/images/20131105-cerberus2.jpg" /></p>
<p>Minotaur</p>
<p><img alt="Minotaur" src="/static/images/20131105-minotaur.jpg" />
<img alt="Minotaur" src="/static/images/20131105-minotaur2.jpg" /></p>
<p>Which representation is more true to the story? More true emotionally? Which ones scare you more?</p>
<p>Choosing representations in user interfaces, data visualizations, and web design is a similar sort of question. Sometimes you want to move the user to action via emotion (in a sales pitch). Other times you want to appeal to cold hard reality (an analytics dashboard).</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Say what you will about PHP, Rasmus Lerdorf is Awesome</title>
            <author><name></name></author>
            <link href="/posts/20131104-rasmus/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131104-rasmus/</id>
            
            <content type="html">
              <p><img alt="Tablet" src="/static/images/20131104-rasmus.jpg" /></p>
<p>I got to see Rasmus Lerdorf talk a few years back. He left an impression as a pragmatic, no-nonsense problem solver. I ran into <a href="http://en.wikiquote.org/wiki/Rasmus_Lerdorf">some of his quotes</a> recently. </p>
<p>About relating to your tools:</p>
<blockquote>
<p>PHP is about as exciting as your toothbrush. You use it every day, it does the job, it is a simple tool, so what? Who would want to read about toothbrushes?</p>
</blockquote>
<p>Solutions should fit the problem:</p>
<blockquote>
<p>Ugly problems often require ugly solutions. Solving an ugly problem in a pure manner is bloody hard.</p>
</blockquote>
<p>Don't forget that frameworks won't remove the fundamental challenge of problem solving in software development:</p>
<blockquote>
<p>Nothing is going to build your application for you, no matter what it promises. You are going to have to build it yourself. Instead of starting by fixing the mistakes in some foreign framework and refactoring all the things that don't apply to your environment spend your time building a lean and reusable pattern that fits your requirements directly.</p>
</blockquote>
<p>He says,</p>
<blockquote>
<p>I actually hate programming, but I love solving problems.</p>
</blockquote>
<p>but don't take it on face value:</p>
<blockquote>
<p>For all the folks getting excited about my quotes. Here is another - Yes, I am a terrible coder, but I am probably still better than you :)</p>
</blockquote>
            </content>
        </entry>
    
        <entry>
            <title type="html">Diptychs, the Ancient iPads</title>
            <author><name></name></author>
            <link href="/posts/20131103-dyptych/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131103-dyptych/</id>
            
            <content type="html">
              <p><img alt="Tablet" src="/static/images/20131102-tablet.jpg" /></p>
<p>An ancient iPad?</p>
<p>Sort of. It's a diptych – a hinged device with two wax-coated plates used for temporary notes by scribes.</p>
<p>The really strange thing is that wax tablets were used for writing all the way until the 19th century (for fish markets in France, apparently).</p>
<p>It makes sense, what other writing surface has these traits:</p>
<ol>
<li>requires no electricity</li>
<li>wipes clean by hand</li>
<li>waterproof</li>
</ol>
<p>Modern electronics offer stunning capabilities, but can you imagine an iPad ever fulfilling all three of these design criteria? As advanced as our algorithms and electronics get, there's probably always going to be a situation that calls for a wax tablet.</p>
<p>While this is a bit of an exaggeration, it does illustrate that when you zoom out of the focus on consumer software and electronics, there are quite a stunning <em>variety</em> of demands of technological capabilities.</p>
<p>(from Wiki <a href="http://en.wikipedia.org/wiki/Diptych">Diptych</a> and <a href="http://en.wikipedia.org/wiki/Wax_tablet#cite_note-13">Wax Tablet</a>)</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Emacs Keybindings in OS X</title>
            <author><name></name></author>
            <link href="/posts/20131102-emacs/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131102-emacs/</id>
            
            <content type="html">
              <p>Some fancy, very simple shortcuts that make a huge difference in text editing productivity.</p>
<p>You can use Emacs keybindings anywhere in OSX to do things like move the cursor to the end of the line, select a word, or start a new line of text.</p>
<p>I had a hard time finding these online, so I worked them out by trial and error:</p>
<pre>    
    Ctrl+D : Delete character
    Ctrl+K : Delete to end of line
    Ctrl+V : End of document
    Ctrl+W : Selects word
    Ctrl+O : Starts new line
    Ctrl+T : Transpose
    Ctrl+P : Previous Line
    Ctrl+N : Next Line
    Ctrl+F : Forward one character
    Ctrl+B : Backward one character
</pre>

<p>This works best is you map your Caps Lock to to the Ctrl key (it's in the System Preferences).</p>
<p>These keybindings keep me away from the arrow keys about 90% of the time, a big win for keyboard ergonomics.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Apollo Engineering, Science, and Operations Documentation</title>
            <author><name></name></author>
            <link href="/posts/20131031-apollo/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131031-apollo/</id>
            
            <content type="html">
              <p><img alt="Clip from Apollo docs" src="/static/images/20131031-apollo.png" /></p>
<p>A <a href="http://www.hq.nasa.gov/alsj/main.html">bunch of documentation</a> from the Apollo space mission, "arguably the most difficult technological undertaking in all of history."</p>
<p>I am amazed how little documentation the engineers that sent a man to the moon produced. They didn't have the possibility of copy+paste, so they had to choose their words carefully and prepare information-rich diagrams.</p>
<p>You can take this reasoning pretty far: Edward Tufte argues convincingly that the advent of <a href="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001yB">Powerpoint <em>reduced</em> the quality of engineering work</a> at NASA.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Backbone Fundamentals Library Example without the Yaks</title>
            <author><name></name></author>
            <link href="/posts/20131029-yak/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131029-yak/</id>
            
            <content type="html">
              <p>A few more days into my BackboneJS study, and I have been working through a bit of the <a href="http://www.amazon.com/Developing-Backbone-js-Applications-Addy-Osmani/dp/1449328253">Backbone Fundamentals book</a>. You can read it online for free on <a href="https://github.com/addyosmani/backbone-fundamentals">the author's Github</a>.</p>
<p>I did find myself stuck doing some yak shaving. </p>
<blockquote>
<p>yak shaving is what you are doing when you're doing some stupid, fiddly little task that bears no obvious relationship to what you're supposed to be working on, but yet a chain of twelve causal relations links what you're doing to the original meta-task. <a href="http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html">(source)</a></p>
</blockquote>
<p>In this case, the yak was Mongodb, and shaving it involved debugging its broken installer on my recently updated Macbook. After a half hour of this, I gave up and ported the API in the exercise to use a tiny file-based data store called <a href="https://github.com/jtsage/nodejs-microdb">MicroDB</a>.</p>
<p>MicroDB was less than 200 lines of code, doesn't seem to have been updated in a year, and did exactly as much as I needed it to. It took about 10 minutes to port the code. </p>
<p>I uploaded the ported code to my Github accounts. There may be some sharp edges, but it implements all the major features (add, edit, delete) <a href="https://github.com/marcpare/backbone-fundamental-library-feweryaks">Github</a></p>
<p>I am quite curious now how you would go about building a NodeJS app with a file-based data store. This is a fantastically useful pattern for prototyping or smaller sites. I couldn't find any simple, convenient ways to do this. I'll be on the lookout. </p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Sharp Enough to See Through Color</title>
            <author><name></name></author>
            <link href="/posts/20131029-bird/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131029-bird/</id>
            
            <content type="html">
              <p><img alt="Birds" src="/static/images/20131029-bird1.png" />
<img alt="Birds" src="/static/images/20131029-bird2.png" />
(from <a href="http://www.archive.org/stream/naturalhistory39newy#page/205/mode/1up">Chapman, F</a>)</p>
<p>The blue feathers in most birds don't actually have any blue pigment. The particular pattern of pores in the feather's structure scatter certain wavelengths of light so that it appears that they are colored.</p>
<p>In other words, it's a physical (structural) effect, not a chemical one. There isn't actually any blue in a kingfisher's feather.</p>
<p>The man that instigated the scientific investigation of this topic was ornithologist,
Louis Agassiz Fuertes. His bird observations are famous:</p>
<blockquote>
<p>He made thousands of bird paintings and sketches, based on studies in nature and details from fresh specimens, that illustrate a range of ornithological works.</p>
</blockquote>
<p>As the sketches above show, he could draw complex bird behavior from memory.</p>
<p>Awesome to consider how sharply Agassiz managed to hone his skills of observation.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">NY Times - A Game of Shark and Minnow</title>
            <author><name></name></author>
            <link href="/posts/20131017-sharkandminnow/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131017-sharkandminnow/</id>
            
            <content type="html">
              <p><img alt="Screen clip from NY Times" src="/static/images/20131027-shark.png" /></p>
<p>The latest piece in digital narrative from the creative desks at the NY Times about "the world's most surreal fishing camp." <a href="http://www.nytimes.com/newsgraphics/2013/10/27/south-china-sea/?hp">A Game of Shark and Minnow</a></p>
<p>Lots of gems in this story: politics, Asia, geography, history, fishing, technology, economics, and more. The screen clip above is from a section that describes the ingenuity of people on the marooned boat.</p>
<blockquote>
<p>They made spearfishing guns from a piece of wood, a bolt repurposed as a trigger and two pieces of rubber for propulsion</p>
</blockquote>
<p>The notes on geo-political strategy use cabbage, salami, big bellies, and forest growth as metaphors.</p>
<p>The source code isn't minified or obfuscated in case you're curious about how this sort of visualization gets built.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Nice Experience with TodoMVC</title>
            <author><name></name></author>
            <link href="/posts/20131026-todomvc/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131026-todomvc/</id>
            
            <content type="html">
              <p><img alt="TodoMVC logo" src="/static/images/20131026-todomvc.png" /></p>
<p>I learned a style tip about prototypal inheritance a few days ago from my study of BackboneJS, and I got to encounter the friendly folks behind TodoMVC.</p>
<p>I noticed a parameter that wasn't strictly necessary to the behavior of a function.</p>
<p>Here are the functions:</p>
<pre>
filterOne: function(todo){ todo.trigger('visible'); }
filterAll: function(){ app.todos.each(this.filterOne, this); }
</pre>

<p>Here is the change you can make to <code>filterAll</code> without breaking the behavior:</p>
<pre>
filterAll: function(){ app.todos.each(this.filterOne); }
</pre>

<p>I received a reply to my filed issue in less than a few hours. <a href="https://twitter.com/passy">@passy</a> let me know that, while not strictly necessary, passing in the extra <code>this</code> helps by keeping the current object around in case the <code>filterOne</code> function needs it in the future. </p>
<p>This sort of situation is not one that I have encountered in object-oriented programming, where you can't reassign the context of a function. In Javascript, this is really easy and, as I found out, something you encounter right away.</p>
<p>Do check out <a href="https://github.com/tastejs/todomvc">TodoMVC</a> if you're poking around modern Javascript frameworks. There is nothing like looking at real implementations. They responded to my issue filing right away, and I've learned a lot from their code so far.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">How Norman Borlaug Worked</title>
            <author><name></name></author>
            <link href="/posts/20131026-norman/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131026-norman/</id>
            
            <content type="html">
              <p><img alt="Borlaug in a field" src="/static/images/20131026-borlaug.gif" /></p>
<p>(image from <a href="http://www.normanborlaug.org/">Norman Borlaug Heritage Foundation</a>) </p>
<p>Norman Ernest Borlaug was an American agronomist, humanitarian and Nobel laureate who has been called "The Man Who Saved A Billion Lives". (<a href="http://en.wikipedia.org/wiki/Norman_Borlaug">wiki</a>)</p>
<p>How did Dr. Borlaug go about his work? He wasn't the typical stodgy scientist or reclusive nerd:</p>
<blockquote>
<p>I needed to be a scrambling quarterback, to dart and weave and grab each chance that showed up in front of me. I couldn't know in advance what would appear, let alone how I'd respond.</p>
</blockquote>
<p>He takes this idea further, connecting it to the role that he believes the scientist should play in society–</p>
<blockquote>
<p>The scientist is a privileged person, the man who should lead us out of the wilderness of static, unproductive agriculture, and yet by this apathy and failure to exercise his unique vision, he keeps us in the swamp of despair.</p>
<p><em>The scientist fears change because he is in a relatively privileged position in his own society.</em> If there is no breakthrough in yield, he will not be criticized. But if he makes a recommendation and something goes wrong, he may lose his job.</p>
</blockquote>
            </content>
        </entry>
    
        <entry>
            <title type="html">Macbook Air Battery Life</title>
            <author><name></name></author>
            <link href="/posts/20131023-battery/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131023-battery/</id>
            
            <content type="html">
              <p>John Siracusa's <a href="http://arstechnica.com/apple/2013/10/os-x-10-9/18/">monster OS X upgrade review</a> just landed, and it doesn't disappoint.</p>
<p>The most important new change for me is battery life. Sounds boring, right?</p>
<blockquote>
<p>And yet we all find big increases in battery life attractive, sometimes even revelatory, once we experience them. New MacBook Air owners have been giddily posting pictures of their battery status menu and explaining how it has changed their habits and, in some tiny way, their lives.</p>
</blockquote>
<p>For me, better battery life means better communication. </p>
<p>I may have a design meeting in the morning, coffee in the afternoon, then a work session in the evening. Inevitably, a chance meeting will happen in between.</p>
<p>Conversations tend to take place in places where it's hard to find a power source. Even if it isn't, searching for an adapter and tethering yourself to it reduces the spontaneity and smoothness of the encounter. If you don't have a reliable day's battery life, you'll be estimating constantly if it's worth taking out your computer for a demo.</p>
<p>How much of the success and failure of a software project is determined by the communication between client and developer? </p>
<p>I've found even just small improvements in communication have dramatic impacts on the joy and success of software projects. So, for me, better battery life translates to joy and success.</p>
<p>I hit upgrade right away.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Gustave Doré</title>
            <author><name></name></author>
            <link href="/posts/20131022-dore/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131022-dore/</id>
            
            <content type="html">
              <p><img alt="The Council of Rate" src="/static/images/20131022-rats.jpg" />
(from <a href="http://en.wikipedia.org/wiki/Gustave_Dor%C3%A9">Wikipedia</a>)</p>
<p>Gustave Doré was the most popular illustrator of the the 1800s. He was extraordinarily prolific and commercially successful.</p>
<p>He fits the pattern of superhuman inborn talent finding just the right environment to flourish.</p>
<blockquote>
<p>Gustave Doré was born in Strasbourg in January 1832. He was the ultimate child prodigy. His earliest dated drawings were from the age of five...By the age of 12 he was carving his own lithographic stones, making sets of engravings with stories to go with them. </p>
<p>Doré exploded onto the Parisian art scene at the age of 15, even though he was short and looked about ten years old. The Doré family visited Paris for the first time when Gustave was 15...One day they went by a publishing company, with a set of engravings displayed in the window. Gustave immediately hatched a plan. </p>
<p>The next morning he feigned illness and told the family to go on without him. He quickly made several sketches and headed for that publishing company. He walked in the front door, found the office of the publisher Charles Philipon, and barged right in. He plopped his drawings down on Philipon's desk and exclaimed, "This is how that set of illustrations should be done." Philipon was amused at Gustave's antics, but when he looked down at the drawings he almost cried.</p>
</blockquote>
<p>(from <a href="http://www.antiquemapsandprints.com/gustave-dore.htm">Mr Dan Malan</a>)</p>
<p>I love stories like this for a good dose of ego-check. </p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Difficult to Believe but Optimized</title>
            <author><name></name></author>
            <link href="/posts/20131020-backbone/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131020-backbone/</id>
            
            <content type="html">
              <p>Day 1 of studying backbonejs, and I found this gem in the source:</p>
<pre>
// A difficult-to-believe, but optimized internal dispatch function for
// triggering events. Tries to keep the usual cases speedy (most internal
// Backbone events have 3 arguments).
var triggerEvents = function(events, args) {
  var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];

  switch (args.length) {
    case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
    case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
    case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
    case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
    default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
  }
};
</pre>

<p><code>(ev = events[i])</code> is a nifty trick to save a few characters (and make the code more clear).</p>
<p>Why does this function exist at all?</p>
<p>Looking carefully, it seems that the function attempts to use <code>call</code> rather than <code>apply</code>, only using <code>apply</code> as a last resort.</p>
<p>I think it's because <code>call</code> is faster than <code>apply</code>?</p>
<p><img alt="Call vs Apply test results" src="/static/images/20131020-backboneperf.png" /></p>
<p><a href="http://jsperf.com/test-call-vs-apply/34">Test on jsperf</a></p>
<p>Cool stuff, shows just how much real-world Javascript performance is a dark art.</p>
            </content>
        </entry>
    
        <entry>
            <title type="html">Kentaro Toyama The ICT4D Jester</title>
            <author><name></name></author>
            <link href="/posts/20131018-kentaro/"/>
            <updated></updated>
            <published></published>
            <id>/posts/20131018-kentaro/</id>
            
            <content type="html">
              <p>Kentaro's blog, <a href="http://blog.ict4djester.org/">The ICT4D Jester</a> breaks down humanitarian efforts involving computers, internet, and devices. He founded and ran Microsoft Research India but pulls no punches in critiquing technology's role in aid work. </p>
<iframe width="640" height="360" src="//www.youtube.com/embed/cxutDM2r534?feature=player_embedded" frameborder="0" allowfullscreen></iframe>
            </content>
        </entry>
    
</feed>